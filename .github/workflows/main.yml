name: Delta deploy to PROD (on new commits on the `main` branch)

on:
  push:
    branches:    
      - main

jobs:
  Delta-Deploy-PLAYGROUND:
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      # Install plugins
      - name: Install plugins
        run: |
          echo y | sf plugins install @salesforce/plugin-devops-center
          sf plugins

      # Install utilities
      - name: Install utilities
        run: |
         pip install yq
         xq --version

      # Checkout the main branch (the branch that received the push)
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Assicuriamoci di avere tutta la cronologia per il confronto dei commit

      # Checkout the PR source branch (the one that was merged into main)
      - name: Checkout the PR source branch
        run: |
          # Fai il fetch del branch sorgente della PR (quello che Ã¨ stato unito a main)
          git fetch origin pull/${{ github.event.pull_request.number }}/head:refs/remotes/origin/${{ github.head_ref }}
          # Checkout del branch sorgente
          git checkout ${{ github.head_ref }}

      # Authenticate to target org
      - name: "Authenticate to Org"
        run: |
          echo ${{ secrets.SFDXAUTHURL_UAT }} > ./SFDX_URL.txt
          sf org login sfdx-url --sfdx-url-file ./SFDX_URL.txt --set-default

      # Compute delta between main and PR branch
      - name: "Compute delta"
        run: |
          # Troviamo il commit base tra main e il branch della PR
          export BASE_COMMIT=$(git merge-base origin/main origin/${{ github.head_ref }})

          # Eseguiamo il delta deploy solo sui file modificati
          sf sgd:source:delta --to "HEAD" --from $BASE_COMMIT --output-dir "." -i .forceignore
          echo "--- package.xml generated with added and modified metadata ---"
          cat package/package.xml
          echo
          echo "--- Apex Tests to be executed ---"
          
          export APEX_CLASSES=$(xq . < package/package.xml | jq '.Package.types | [.] | flatten | map(select(.name=="ApexClass")) | .[] | .members | [.] | flatten | map(select(. | index("*") | not)) | unique | join(" ")' -r)
          echo $APEX_CLASSES
          echo
          echo "--- Delta Deploy ---"
          
          # Verifica se ci sono test da eseguire
          if [ -z "$APEX_CLASSES" ]; then
            sf project deploy start --manifest package/package.xml --wait 30
          else
            echo "APEX_CLASSES variable is: $APEX_CLASSES"
            sf project deploy start --manifest package/package.xml --wait 30 --test-level RunSpecifiedTests --tests $APEX_CLASSES
          fi
